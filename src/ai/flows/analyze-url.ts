// This file was generated by Firebase Genkit.
'use server';
/**
 * @fileOverview Analyzes a URL for suspicious patterns and reputation.
 *
 * - analyzeURL - A function that handles the URL analysis process.
 * - AnalyzeURLInput - The input type for the analyzeURL function.
 * - AnalyzeURLOutput - The return type for the analyzeURL function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const AnalyzeURLInputSchema = z.object({
  url: z.string().url().describe('The URL to analyze.'),
});
export type AnalyzeURLInput = z.infer<typeof AnalyzeURLInputSchema>;

const AnalyzeURLOutputSchema = z.object({
  isSafe: z.boolean().describe('Whether the URL is considered safe or not.'),
  riskLevel: z.enum(['high', 'medium', 'low']).describe('The risk level associated with the URL.'),
  explanation: z.string().describe('An explanation of why the URL is considered safe or unsafe.'),
});
export type AnalyzeURLOutput = z.infer<typeof AnalyzeURLOutputSchema>;

export async function analyzeURL(input: AnalyzeURLInput): Promise<AnalyzeURLOutput> {
  return analyzeURLFlow(input);
}

const analyzeURLPrompt = ai.definePrompt({
  name: 'analyzeURLPrompt',
  input: {
    schema: z.object({
      url: z.string().url().describe('The URL to analyze.'),
    }),
  },
  output: {
    schema: z.object({
      isSafe: z.boolean().describe('Whether the URL is considered safe or not.'),
      riskLevel: z.enum(['high', 'medium', 'low']).describe('The risk level associated with the URL.'),
      explanation: z.string().describe('An explanation of why the URL is considered safe or unsafe.'),
    }),
  },
  prompt: `You are a cybersecurity expert analyzing URLs for potential phishing attempts.

Analyze the following URL and determine if it is safe or unsafe. Provide a risk level and explanation for your decision.

URL: {{{url}}}

Consider factors such as the URL's structure, domain reputation, and any suspicious patterns.

Output your assessment in JSON format.`,
});

const analyzeURLFlow = ai.defineFlow<
  typeof AnalyzeURLInputSchema,
  typeof AnalyzeURLOutputSchema
>({
  name: 'analyzeURLFlow',
  inputSchema: AnalyzeURLInputSchema,
  outputSchema: AnalyzeURLOutputSchema,
},
async input => {
  const {output} = await analyzeURLPrompt(input);
  return output!;
});
